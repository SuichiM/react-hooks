{"version":3,"sources":["context/ThemeContext.js","components/Header.jsx","hooks/useCharacters.js","components/Search.jsx","components/Characters.jsx","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","React","createContext","Header","useState","darkMode","setDarkMode","color","useContext","className","style","type","onClick","useCharacters","url","characters","setCharacters","useEffect","fetch","then","response","json","data","results","Search","search","handleSearch","value","onChange","initialState","favorites","favoriteReducer","state","action","payload","filter","favorite","id","Characters","useReducer","dispatch","setSearch","filteredUsers","useMemo","name","toLowerCase","includes","display","flexWrap","map","flexDirection","alignItems","marginInline","key","width","src","image","alt","removeFav","e","target","character","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qNAeeA,EAFMC,IAAMC,cAAc,MCQ1BC,EAlBA,WAAO,IAAD,EACaC,oBAAS,GADtB,mBACZC,EADY,KACFC,EADE,KAEbC,EAAQC,qBAAWR,GAMzB,OACE,yBAAKS,UAAU,UACb,wBAAIC,MAAO,CAAEH,UAAb,cACA,4BAAQI,KAAK,SAASC,QAPN,WAClBN,GAAaD,KAMkCA,EAAW,YAAc,cACtE,4BAAQM,KAAK,SAASC,QAAS,kBAAMN,GACjCD,KAAYA,EAAW,cAAgB,kB,cCFlCQ,EAZO,SAACC,GAAS,IAAD,EACOV,mBAAS,IADhB,mBACtBW,EADsB,KACVC,EADU,KAS7B,OANAC,qBAAU,WACRC,MAAMJ,GACHK,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUN,EAAcM,EAAKC,cACpC,CAACT,IAEGC,GCDMS,EARA,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,aACvB,OACE,yBAAKjB,UAAU,UACb,2BAAOE,KAAK,OAAOgB,MAAOF,EAAQG,SAAUF,MCD5CG,EAAe,CACnBC,UAAW,IAGPC,EAAkB,SAACC,EAAOC,GAC9B,OAAQA,EAAOtB,MACb,IAAK,kBACH,OAAO,2BACFqB,GADL,IAEEF,UAAU,GAAD,mBAAME,EAAMF,WAAZ,CAAuBG,EAAOC,YAE3C,IAAK,qBACH,OAAO,2BACFF,GADL,IAEEF,UAAU,YACLE,EAAMF,UAAUK,QACjB,SAACC,GAAD,OAAcA,EAASC,KAAOJ,EAAOC,QAAQG,SAIrD,QACE,OAAOL,IAuFEM,EAjFI,WAAO,IAAD,EACOC,qBAAWR,EAAiBF,GADnC,mBAChBC,EADgB,KACLU,EADK,OAEKpC,mBAAS,IAFd,mBAEhBqB,EAFgB,KAERgB,EAFQ,KAIjB1B,EAAaF,EANE,8CAkBf6B,EAAgBC,mBACpB,kBACE5B,EAAWoB,QAAO,qBAAES,KACbC,cAAcC,SAASrB,EAAOoB,oBAEvC,CAAC9B,EAAYU,IAGf,OACE,yBAAKhB,UAAU,cACb,0CACA,yBAAKC,MAAO,CAACqC,QAAS,OAAQC,SAAU,SACrClB,EAAUA,UAAUmB,KAAI,SAACb,GAAD,OACvB,yBACE1B,MAAO,CACLqC,QAAS,OACTG,cAAe,SACfC,WAAY,SACZC,aAAc,SAEhBC,IAAKjB,EAASC,IAEd,yBACE5B,UAAU,gCACV6C,MAAO,GACPC,IAAKnB,EAASoB,MACdC,IAAKrB,EAASQ,OAEhB,4BAAQjC,KAAK,SAASC,QAAS,kBAlCvB,SAACwB,GACjBI,EAAS,CAAC7B,KAAM,qBAAsBuB,QAASE,IAiCFsB,CAAUtB,KAA/C,iBAON,kBAAC,EAAD,CAAQX,OAAQA,EAAQC,aArCP,SAACiC,GAAD,OAAOlB,EAAUkB,EAAEC,OAAOjC,UAsC3C,0CACA,yBAAKjB,MAAO,CAACqC,QAAS,OAAQC,SAAU,SACrCN,EAAcO,KAAI,SAACY,GAAD,OACjB,yBACEnD,MAAO,CACLqC,QAAS,OACTG,cAAe,SACfC,WAAY,SACZC,aAAc,SAEhBC,IAAKQ,EAAUxB,IAEf,4BAAKwB,EAAUjB,MACf,yBACEnC,UAAU,gCACV6C,MAAO,GACPC,IAAKM,EAAUL,MACfC,IAAKI,EAAUjB,OAEjB,4BAAQjC,KAAK,SAASC,QAAS,WAhEvC4B,EAAS,CAAC7B,KAAM,kBAAmBuB,QAgEsB2B,MAAjD,8B,MCxFGC,MATf,WACE,OACE,yBAAKrD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAaC,SAAd,CAAuB5C,MAAM,QAC3B,kBAAC,EAAD,QAGJ6C,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6aaef11f.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const themes = {\n  dark: {\n    color: \"#4ecca3\",\n    background: \"#232931\",\n  },\n  light: {\n    color: \"#1e56a0\",\n    background: \"#f5feff\",\n  },\n};\n\nconst ThemeContext = React.createContext(null);\n\nexport default ThemeContext;\n","import React, { useState, useContext } from 'react';\nimport ThemeContext from '../context/ThemeContext';\n\nconst Header = () => {\n  const [darkMode, setDarkMode] = useState(false);\n  const color = useContext(ThemeContext);\n\n  const handleClick = () => {\n    setDarkMode(!darkMode);\n  }\n\n  return (\n    <div className=\"Header\">\n      <h1 style={{ color }}>ReactHooks</h1>\n      <button type=\"button\" onClick={handleClick}>{darkMode ? 'Dark Mode' : 'Light Mode'}</button>\n      <button type=\"button\" onClick={() => setDarkMode\n        (!darkMode)}>{darkMode ? 'Dark Mode 2' : 'Light Mode 2'}</button>\n    </div>\n  );\n}\n\nexport default Header;","import {useState, useEffect} from \"react\";\n\nconst useCharacters = (url) => {\n  const [characters, setCharacters] = useState([]);\n\n  useEffect(() => {\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => setCharacters(data.results));\n  }, [url]);\n\n  return characters;\n};\n\nexport default useCharacters;\n","import React from \"react\";\n\nconst Search = ({search, handleSearch}) => {\n  return (\n    <div className=\"search\">\n      <input type=\"text\" value={search} onChange={handleSearch} />\n    </div>\n  );\n};\n\nexport default Search;\n","import React, {useState, useReducer, useMemo} from \"react\";\nimport useCharacters from \"../hooks/useCharacters\";\nimport Search from \"./Search\";\n\nconst initialState = {\n  favorites: [],\n};\n\nconst favoriteReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TO_FAVORITE\":\n      return {\n        ...state,\n        favorites: [...state.favorites, action.payload],\n      };\n    case \"DELETE_TO_FAVORITE\":\n      return {\n        ...state,\n        favorites: [\n          ...state.favorites.filter(\n            (favorite) => favorite.id !== action.payload.id\n          ),\n        ],\n      };\n    default:\n      return state;\n  }\n};\n\nconst CHARACTERS_URL = \"https://rickandmortyapi.com/api/character/\";\n\nconst Characters = () => {\n  const [favorites, dispatch] = useReducer(favoriteReducer, initialState);\n  const [search, setSearch] = useState(\"\");\n\n  const characters = useCharacters(CHARACTERS_URL);\n\n  const handleClick = (favorite) => {\n    dispatch({type: \"ADD_TO_FAVORITE\", payload: favorite});\n  };\n\n  const removeFav = (favorite) => {\n    dispatch({type: \"DELETE_TO_FAVORITE\", payload: favorite});\n  };\n\n  const handleSearch = (e) => setSearch(e.target.value);\n\n  const filteredUsers = useMemo(\n    () =>\n      characters.filter(({name}) =>\n        name.toLowerCase().includes(search.toLowerCase())\n      ),\n    [characters, search]\n  );\n\n  return (\n    <div className=\"characters\">\n      <h2> Favorites</h2>\n      <div style={{display: \"flex\", flexWrap: \"wrap\"}}>\n        {favorites.favorites.map((favorite) => (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              marginInline: \".5rem\",\n            }}\n            key={favorite.id}\n          >\n            <img\n              className=\"rounded-circle favoriteCircle\"\n              width={64}\n              src={favorite.image}\n              alt={favorite.name}\n            />\n            <button type=\"button\" onClick={() => removeFav(favorite)}>\n              Eliminar\n            </button>\n          </div>\n        ))}\n      </div>\n\n      <Search search={search} handleSearch={handleSearch} />\n      <h2>Characters</h2>\n      <div style={{display: \"flex\", flexWrap: \"wrap\"}}>\n        {filteredUsers.map((character) => (\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              marginInline: \".5rem\",\n            }}\n            key={character.id}\n          >\n            <h2>{character.name}</h2>\n            <img\n              className=\"rounded-circle favoriteCircle\"\n              width={64}\n              src={character.image}\n              alt={character.name}\n            />\n            <button type=\"button\" onClick={() => handleClick(character)}>\n              Agregar a Favoritos\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Characters;\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Characters from \"./components/Characters\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Characters />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ThemeContext from './context/ThemeContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeContext.Provider value=\"blue\">\n      <App />\n    </ThemeContext.Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}